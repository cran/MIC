// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// reverse_complement
std::string reverse_complement(std::string dna);
RcppExport SEXP _MIC_reverse_complement(SEXP dnaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type dna(dnaSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse_complement(dna));
    return rcpp_result_gen;
END_RCPP
}
// kmers
List kmers(const CharacterVector& x, int k, bool simplify, bool canonical, bool squeeze, bool anchor, bool clean_up, bool key_as_int, bool starting_index);
RcppExport SEXP _MIC_kmers(SEXP xSEXP, SEXP kSEXP, SEXP simplifySEXP, SEXP canonicalSEXP, SEXP squeezeSEXP, SEXP anchorSEXP, SEXP clean_upSEXP, SEXP key_as_intSEXP, SEXP starting_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type simplify(simplifySEXP);
    Rcpp::traits::input_parameter< bool >::type canonical(canonicalSEXP);
    Rcpp::traits::input_parameter< bool >::type squeeze(squeezeSEXP);
    Rcpp::traits::input_parameter< bool >::type anchor(anchorSEXP);
    Rcpp::traits::input_parameter< bool >::type clean_up(clean_upSEXP);
    Rcpp::traits::input_parameter< bool >::type key_as_int(key_as_intSEXP);
    Rcpp::traits::input_parameter< bool >::type starting_index(starting_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(kmers(x, k, simplify, canonical, squeeze, anchor, clean_up, key_as_int, starting_index));
    return rcpp_result_gen;
END_RCPP
}
// genome_to_libsvm
bool genome_to_libsvm(const CharacterVector& x, const CharacterVector& target_path, const CharacterVector& label, int k, bool canonical, bool squeeze);
RcppExport SEXP _MIC_genome_to_libsvm(SEXP xSEXP, SEXP target_pathSEXP, SEXP labelSEXP, SEXP kSEXP, SEXP canonicalSEXP, SEXP squeezeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const CharacterVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type target_path(target_pathSEXP);
    Rcpp::traits::input_parameter< const CharacterVector& >::type label(labelSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type canonical(canonicalSEXP);
    Rcpp::traits::input_parameter< bool >::type squeeze(squeezeSEXP);
    rcpp_result_gen = Rcpp::wrap(genome_to_libsvm(x, target_path, label, k, canonical, squeeze));
    return rcpp_result_gen;
END_RCPP
}
// squeezed_mers
StringVector squeezed_mers(int k);
RcppExport SEXP _MIC_squeezed_mers(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(squeezed_mers(k));
    return rcpp_result_gen;
END_RCPP
}
// unsqueezed_mers
StringVector unsqueezed_mers(int k);
RcppExport SEXP _MIC_unsqueezed_mers(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(unsqueezed_mers(k));
    return rcpp_result_gen;
END_RCPP
}
// squeezed_index_to_str
StringVector squeezed_index_to_str(IntegerVector x, int k, unsigned int starting_index);
RcppExport SEXP _MIC_squeezed_index_to_str(SEXP xSEXP, SEXP kSEXP, SEXP starting_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type starting_index(starting_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(squeezed_index_to_str(x, k, starting_index));
    return rcpp_result_gen;
END_RCPP
}
// unsqueezed_index_to_str
StringVector unsqueezed_index_to_str(IntegerVector x, int k, unsigned int starting_index);
RcppExport SEXP _MIC_unsqueezed_index_to_str(SEXP xSEXP, SEXP kSEXP, SEXP starting_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type starting_index(starting_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(unsqueezed_index_to_str(x, k, starting_index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MIC_reverse_complement", (DL_FUNC) &_MIC_reverse_complement, 1},
    {"_MIC_kmers", (DL_FUNC) &_MIC_kmers, 9},
    {"_MIC_genome_to_libsvm", (DL_FUNC) &_MIC_genome_to_libsvm, 6},
    {"_MIC_squeezed_mers", (DL_FUNC) &_MIC_squeezed_mers, 1},
    {"_MIC_unsqueezed_mers", (DL_FUNC) &_MIC_unsqueezed_mers, 1},
    {"_MIC_squeezed_index_to_str", (DL_FUNC) &_MIC_squeezed_index_to_str, 3},
    {"_MIC_unsqueezed_index_to_str", (DL_FUNC) &_MIC_unsqueezed_index_to_str, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MIC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
